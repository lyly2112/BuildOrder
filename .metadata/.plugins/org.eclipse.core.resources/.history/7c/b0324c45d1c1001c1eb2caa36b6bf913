import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

public class BuildOrderMain {
//
////
////	static List<String> buildOrder(String[][] processes, String[] projects) {
////		Set<String> tempMarks = new HashSet<String>();
////		Set<String> permMarks = new HashSet<String>();
////
////		for (int i = 0; i < processes.length; i++) {
////			if (!permMarks.contains(processes[i][0]) || !permMarks.contains(processes[i][1])) {
////				System.out.println(processes[i][1]);
////				visit(processes[i], processes, tempMarks, permMarks, results);
////			}
////		}
////		return results;
////	}
//
//	public static void visit(String[] process, String[][] processes, Set<String> tempMarks, Set<String> permMarks,
//			List<String> results) {
//		if (tempMarks.contains(process[1]))
//			throw new RuntimeException();
//		if (!permMarks.contains(process[1])) {
//			System.out.println("process[1]:" + process[1]);
//			tempMarks.add(process[1]);
//			for (int i = 0; i < processes.length; i++) {
//				System.out.println("i:" + i);
//				if (processes[i][0] == process[1]) {
//					process = processes[i];
//					System.out.println("process[0]:" + process[0]);
//					System.out.println("process[1]:" + process[1]);
//					System.out.println("into second visit");
//
//					visit(process, processes, tempMarks, permMarks, results);
//
//				}
////				else if (i==processes.length-1 && process[1]!=process[0]) {
////					System.out.println("not found");
////				}
//			}
//
//			System.out.println("permMarks.add " + (process[1]));
//			permMarks.add(process[1]);
//			tempMarks.remove(process[1]);
//			results.add(process[1]);
//		}
	static List<String> buildOrder(String[][] processes, String[] projects, List<String> resultList) {
		Set<String> tempMarks = new HashSet<String>();
		Set<String> permMarks = new HashSet<String>();

		for (int i = 0; i < processes.length; i++) {
			if (!permMarks.contains(processes[i][0]) ) {
				System.out.println(processes[i][0]);
				visit(processes[i][0], processes[i][1], processes, tempMarks, permMarks, resultList);
			}
		}
		return resultList;
	}
//				static String processProject;

	public static void visit(String processProject, String processDep, String[][] processes, Set<String> tempMarks, Set<String> permMarks,
			List<String> resultList) {
		System.out.println("in visit");
		if (tempMarks.contains(processDep))
			throw new RuntimeException();
		if (!permMarks.contains(processProject)) || !permMarks.contains(processDep)){
			System.out.println("processProject:" + processProject);

			System.out.println("processDep:" + processDep);
			tempMarks.add(processDep);
			tempMarks.add(processProject);

			for (int i = 0; i < processes.length; i++) {
				System.out.println();
				System.out.println("i:" + i);
//				 processProject = processes[i][0];
				if (processes[i][0] == processDep) {
					System.out.println("processDep:"+processDep);
//					processProject = processDep;
//					processDep = processes[i][1];
					
//					System.out.println("process[0]:" + process[0]);
//					System.out.println("process[1]:" + processes[i][1]);
					
					System.out.println("into second visit");
					visit(processDep, processes[i][1], processes, tempMarks, permMarks, resultList);

				}
//				else if (i==processes.length-1 && process[1]!=process[0]) {
//					System.out.println("not found");
//				}
			}

			System.out.println("processProject:" + processProject);

			System.out.println("processDep:" + processDep); 
			System.out.println("processDep permMarks.add " + processDep);
			permMarks.add(processDep);
			System.out.println("processProject permMarks.add " + processProject);
			permMarks.add(processProject);
			tempMarks.remove(processDep);
			resultList.add(processDep);
			resultList.add(processProject);

			
			
			System.out.println();
		}
	}
			

	public static void main(String[] args) {
		String[] projects = { "a", "b", "c", "d", "e", "f" };
		String[][] processes = { 
				{ "a", "d" }, 
				{ "f", "b" }, 
				{ "b", "d" }, 
				{ "f", "a" }, 
				{ "d", "c" } };

//		List<String> list = new ArrayList<>();
//		for (String[] process : processes) {
//			list.add(process[0]);
//		}
//		
//		Set<String> set = new HashSet<String>(list);
		List<String> resultList = new ArrayList<String>();

//		for(String item : projects)
//		{
//		    if (set.contains(item)){
//		        //emit found
//		    } else {
//		        //emit not found
//		    	System.out.println("not found " + item);
//		    	resultList.add(item);
//		    }
//		}
		
//		static List<String> buildOrder(String[][] processes, String[] projects, List<String> resultList) {
//		Set<String> tempMarks = new HashSet<String>();
//		Set<String> permMarks = new HashSet<String>();
//
//		for (int i = 0; i < processes.length; i++) {
//			if (!permMarks.contains(processes[i][0]) || !permMarks.contains(processes[i][1])) {
//				System.out.println(processes[i][1]);
//				visit(processes[i], processes, tempMarks, permMarks, results);
//			}
//		}
//		return results;
//	}
		
		
//		
//		List<String> results = new LinkedList<String>();
//
//		for (String project : projects) {
//			for (String[] process : processes) {
//				if (process[1] == project && i == processes.length-1) {
//					results.add(project);
//					System.out.println("project:" + project);
//				}
//			}
//		}
//		
//		for (String result : results) {
//			System.out.println(result);
//		}
//		System.out.println();
		System.out.println(buildOrder(processes, projects, resultList));
//	}

}
	}
